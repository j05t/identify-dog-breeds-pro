buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies { classpath 'com.android.tools.build:gradle:8.6.0' }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url "https://jitpack.io" }
    }
}

project.ext.ASSET_DIR = projectDir.toString() + '/assets'

apply plugin: 'com.android.application'

ext {
    abiCodes = ['armeabi-v7a': 1, 'x86': 2, 'x86_64': 3, 'arm64-v8a': 4]
}

android {
    namespace = 'com.jstappdev.identify_dog_breeds_pro'
    compileSdk 34
    defaultConfig {
        applicationId = 'com.jstappdev.identify_dog_breeds_pro'
        minSdkVersion 21
        targetSdkVersion 35
        versionCode 72
        versionName "30"
    }

    splits {
        abi {
            enable = true
            reset()
            //noinspection ChromeOsAbiSupport
            include project.ext.abiCodes.keySet() as String[]
        }
    }

    sourceSets {
        main {
            java {
                srcDir 'src'
            }

            manifest.srcFile 'AndroidManifest.xml'
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = [project.ext.ASSET_DIR]
            jniLibs.srcDirs = ['libs']
        }

        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
    lint {
        abortOnError false
        disable 'MissingTranslation'
    }
    buildFeatures {
        renderScript true
        aidl true
    }

    android.applicationVariants.configureEach { variant ->
        variant.outputs.each { output ->
            def baseAbiVersionCode = project.ext.abiCodes.get output.getFilter("ABI")
            if (baseAbiVersionCode != null) {
                output.versionCodeOverride = (100 * project.android.defaultConfig.versionCode) + baseAbiVersionCode
            } else {
                output.versionCodeOverride = 100 * project.android.defaultConfig.versionCode
            }
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.debug
        }
    }
}


dependencies {
    implementation(platform("org.jetbrains.kotlin:kotlin-bom:1.8.0"))
    implementation 'org.tensorflow:tensorflow-android:1.13.1'
    implementation 'androidx.activity:activity:1.9.2'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.fragment:fragment:1.8.3'
}